/*
 * Copyright (C) 2018 cottr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.embeddediq.searchmonkey;

import java.awt.Component;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JButton;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author cottr
 */
public class FileDatePanel extends javax.swing.JPanel implements ChangeListener {

    PopupCalendar popupCalendar;

    /**
     * Creates new form FileDatePanel
     */
    public FileDatePanel() {
        initComponents();
        this.jBeforeSpinner.setValue(getDate(Calendar.YEAR, 0));
        this.jAfterSpinner.setValue(getDate(Calendar.YEAR, -1));

        popupCalendar = new PopupCalendar();
        popupCalendar.getCalendar().addChangeListener(this);
        
        this.jAfterSpinner.getEditor().setComponentPopupMenu(jPopupMenu1);
        this.jBeforeSpinner.getEditor().setComponentPopupMenu(jPopupMenu1);
    }
    
    private Date getDate(int interval, int amount)
    {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, 0);
        calendar.set(Calendar.MINUTE, 0);
        calendar.set(Calendar.SECOND, 0);
        calendar.set(Calendar.MILLISECOND, 0);
        calendar.add(interval, amount);
        return  calendar.getTime();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jToolBar5 = new javax.swing.JToolBar();
        jAfter = new javax.swing.JButton();
        jToolBar4 = new javax.swing.JToolBar();
        jBefore = new javax.swing.JButton();
        jAfterSpinner = new javax.swing.JSpinner();
        jBeforeSpinner = new javax.swing.JSpinner();
        jModifiedBeforeCheck = new javax.swing.JCheckBox();
        jModifiedAfterCheck = new javax.swing.JCheckBox();

        jPopupMenu1.setInheritsPopupMenu(true);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/embeddediq/searchmonkey/Bundle"); // NOI18N
        jMenuItem1.setText(bundle.getString("FileDatePanel.jMenuItem1.text")); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText(bundle.getString("FileDatePanel.jMenuItem2.text")); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        jMenuItem3.setText(bundle.getString("FileDatePanel.jMenuItem3.text")); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem3);

        jMenuItem4.setText(bundle.getString("FileDatePanel.jMenuItem4.text")); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem4);

        jMenuItem5.setText(bundle.getString("FileDatePanel.jMenuItem5.text")); // NOI18N
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem5);

        jMenuItem6.setText(bundle.getString("FileDatePanel.jMenuItem6.text")); // NOI18N
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem6);

        jMenuItem7.setText(bundle.getString("FileDatePanel.jMenuItem7.text")); // NOI18N
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem7);

        setLayout(new java.awt.BorderLayout());

        jLabel1.setText(bundle.getString("FileDatePanel.jLabel1.text")); // NOI18N
        add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel1.setComponentPopupMenu(jPopupMenu1);

        jToolBar5.setFloatable(false);
        jToolBar5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar5.setRollover(true);
        jToolBar5.setBorderPainted(false);

        jAfter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/calendar.png"))); // NOI18N
        jAfter.setToolTipText(bundle.getString("SearchEntryPanel.jAfter.toolTipText")); // NOI18N
        jAfter.setComponentPopupMenu(jPopupMenu1);
        jAfter.setFocusable(false);
        jAfter.setHideActionText(true);
        jAfter.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jAfter.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jAfter.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jAfter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAfterActionPerformed(evt);
            }
        });
        jToolBar5.add(jAfter);

        jToolBar4.setFloatable(false);
        jToolBar4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar4.setRollover(true);
        jToolBar4.setBorderPainted(false);

        jBefore.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/calendar.png"))); // NOI18N
        jBefore.setToolTipText(bundle.getString("SearchEntryPanel.jBefore.toolTipText")); // NOI18N
        jBefore.setComponentPopupMenu(jPopupMenu1);
        jBefore.setFocusable(false);
        jBefore.setHideActionText(true);
        jBefore.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBefore.setMargin(new java.awt.Insets(0, 0, 0, 0));
        jBefore.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBefore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBeforeActionPerformed(evt);
            }
        });
        jToolBar4.add(jBefore);

        jAfterSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MONTH));
        jAfterSpinner.setToolTipText(bundle.getString("SearchEntryPanel.jAfterSpinner.toolTipText")); // NOI18N
        jAfterSpinner.setEnabled(false);

        jBeforeSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(), null, null, java.util.Calendar.MONTH));
        jBeforeSpinner.setToolTipText(bundle.getString("SearchEntryPanel.jBeforeSpinner.toolTipText")); // NOI18N
        jBeforeSpinner.setEnabled(false);

        jModifiedBeforeCheck.setText(bundle.getString("SearchEntryPanel.jModifiedBeforeCheck.text")); // NOI18N
        jModifiedBeforeCheck.setToolTipText(bundle.getString("SearchEntryPanel.jModifiedBeforeCheck.toolTipText")); // NOI18N
        jModifiedBeforeCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jModifiedBeforeCheckItemStateChanged(evt);
            }
        });

        jModifiedAfterCheck.setText(bundle.getString("SearchEntryPanel.jModifiedAfterCheck.text")); // NOI18N
        jModifiedAfterCheck.setToolTipText(bundle.getString("SearchEntryPanel.jModifiedAfterCheck.toolTipText")); // NOI18N
        jModifiedAfterCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jModifiedAfterCheckItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jModifiedBeforeCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jModifiedAfterCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBeforeSpinner, javax.swing.GroupLayout.DEFAULT_SIZE, 1537, Short.MAX_VALUE)
                    .addComponent(jAfterSpinner))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jAfterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jModifiedAfterCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBeforeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jModifiedBeforeCheck))
                .addGap(0, 0, 0))
        );

        add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void jModifiedBeforeCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jModifiedBeforeCheckItemStateChanged
        this.jBeforeSpinner.setEnabled(jModifiedBeforeCheck.isSelected());
    }//GEN-LAST:event_jModifiedBeforeCheckItemStateChanged

    private void jModifiedAfterCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jModifiedAfterCheckItemStateChanged
        this.jAfterSpinner.setEnabled(jModifiedAfterCheck.isSelected());
    }//GEN-LAST:event_jModifiedAfterCheckItemStateChanged

    private void jAfterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAfterActionPerformed
        if (!jModifiedAfterCheck.isSelected()) jModifiedAfterCheck.setSelected(true);
        popupCalendar.show(jAfter, jAfterSpinner);
    }//GEN-LAST:event_jAfterActionPerformed

    private void jBeforeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBeforeActionPerformed
        if (!jModifiedBeforeCheck.isSelected()) jModifiedBeforeCheck.setSelected(true);
        popupCalendar.show(jBefore, jBeforeSpinner);
    }//GEN-LAST:event_jBeforeActionPerformed

    @Override
    public void stateChanged(ChangeEvent ce) {
        popupCalendar.updateDate();
    }
    
    public class PopupCalendar extends JPopupMenu {
        CalendarPanel panel;
        public PopupCalendar (){
            panel = new CalendarPanel();
            
            this.add(panel);
            this.pack();
        }
        
        public CalendarPanel getCalendar()
        {
            return panel;
        }
        
        private JSpinner popup_link;
        public void show(JButton jButton, JSpinner link)
        {
            popup_link = link;
            panel.setDate((Date)link.getValue());
            this.show(jButton, 0, jButton.getHeight());
        }
        
        public void updateDate()
        {
            if (popup_link == null) return;
            popup_link.setValue(panel.getDate());
            autoSelectEntry(popup_link);
        }
    }
    
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        jHandleContext(evt, getDate(Calendar.DAY_OF_MONTH, 0)); // Today
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        jHandleContext(evt, getDate(Calendar.DAY_OF_MONTH, -1)); // Yesterday
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        jHandleContext(evt, getDate(Calendar.DAY_OF_MONTH, -7)); // Last week
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        jHandleContext(evt, getDate(Calendar.MONTH, -1)); // Last month
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        jHandleContext(evt, getDate(Calendar.MONTH, -4)); // Last quarter
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        jHandleContext(evt, getDate(Calendar.YEAR, -1)); // Last year
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        jHandleContext(evt, getDate(Calendar.YEAR, -10)); // Last decade
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jHandleContext(java.awt.event.ActionEvent evt, Date date) {                                           
        Component component = jPopupMenu1.getInvoker();
        JSpinner.DateEditor dateEditor;
        if (component == this.jAfter) {
            dateEditor = (JSpinner.DateEditor)this.jAfterSpinner.getEditor();
        } else if (component == this.jBefore) {
            dateEditor = (JSpinner.DateEditor)this.jBeforeSpinner.getEditor();
        } else { //         if (comp2 instanceof JFormattedTextField) {
            dateEditor = (JSpinner.DateEditor)component.getParent();
        }
        dateEditor.getModel().setValue(date); // Last decade
        autoSelectEntry(dateEditor.getParent());
    }

    private void autoSelectEntry(Component component)
    {
        if (!component.isEnabled())
        {
            if (component.equals(jAfterSpinner))
            {
                jModifiedAfterCheck.setSelected(true);
            } else {
                jModifiedBeforeCheck.setSelected(true);                    
            }
        }        
    }

    public void set(FileDateEntry init)
    {
        if (init.useAfter) {
            jModifiedAfterCheck.setSelected(true);
            SpinnerDateModel model = (SpinnerDateModel)jAfterSpinner.getModel();
            model.setValue(init.getAfter());
        }
        if (init.useBefore) {
            jModifiedBeforeCheck.setSelected(true);
            SpinnerDateModel model = (SpinnerDateModel)jBeforeSpinner.getModel();
            model.setValue(init.getBefore());
        }
    }
    
    public FileDateEntry get()
    {
        FileDateEntry init = new FileDateEntry();
        if (jModifiedAfterCheck.isSelected()) {
            init.useAfter = true;
            SpinnerDateModel model = (SpinnerDateModel)jAfterSpinner.getModel();
            init.setAfter(model.getDate());
        }
        if (jModifiedBeforeCheck.isSelected()) {
            init.useBefore = true;
            SpinnerDateModel model = (SpinnerDateModel)jBeforeSpinner.getModel();
            init.setBefore(model.getDate());
        }

        return init;
    }
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAfter;
    private javax.swing.JSpinner jAfterSpinner;
    private javax.swing.JButton jBefore;
    private javax.swing.JSpinner jBeforeSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JCheckBox jModifiedAfterCheck;
    private javax.swing.JCheckBox jModifiedBeforeCheck;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    // End of variables declaration//GEN-END:variables
}
