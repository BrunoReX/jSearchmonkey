<html>
    <head>
        <style type="text/css">
            .list {
                display: flex;
                flex-direction: column;
                margin: 0;
                padding: 0;
            }
            .label1 {
                background: #3c4044;
                padding: .25rem .5rem;
                color: #80c0f0;
                font-weight: bold;
                display: -webkit-box;
                display: flex;
                flex-direction: column;
                margin: 0;
                padding: 0;
            }
            .token {
                background: #3c4044;
                padding: .25rem .5rem;
                color: #80c0f0;
                font-weight: bold;
                display: -webkit-box;
                display: flex;
                flex-direction: column;
                text-align: right;
                float: right;
                margin: 0;
                padding: 0;
            }
            ul {
                display: flex;
                flex: 1 1 0;
                overflow-y: auto;
                align-items: stretch;
                list-style-type: none;
            }
            li {
                display: flex;
                flex: 0 0 auto;
                justify-content: center;
                align-items: center;
                padding: .5rem;
                margin: 0px;
                padding: 0px;
                border-bottom: 1px solid rgba(243,244,244,0.06);
                flex-flow: column;
            }
            .content {
                display: none;
            }
            
            em {
                background-color: #66cc00;
                text-weight: bold;
            }

        </style>
    </head>
    <body>
        <h2 class="label1">Character classes</h2>
        <div data-id="set">
            <h3 class="label">character set [ABC]</h3>
            <div class="content">Match any character in the set.<div class="example"><h1>Example</h1><hr><code class="expression">[aeiou]</code><hr><code class="text"></svg>gl<em>i</em>b j<em>o</em>cks v<em>e</em>x dw<em>a</em>rv<em>e</em>s!</code></div></div>
        </div>
        
        <div data-id="setnot"><h3 class="label">negated set [^ABC]</h3>
            <div class="content">Match any character that is not in the set.<div class="example"><h1>Example</h1><hr><code class="expression">[^aeiou]</code><hr><code class="text"><em>g</em><em>l</em>i<em>b</em><em> </em><em>j</em>o<em>c</em><em>k</em><em>s</em><em> </em><em>v</em>e<em>x</em><em> </em><em>d</em><em>w</em>a<em>r</em><em>v</em>e<em>s</em><em>!</em></code></div></div>
        </div>
        
        <div data-id="range"><h3 class="label">range [A-Z]</h3>
            <div class="content">Matches a character having a character code between the two specified characters inclusive.<div class="example"><h1>Example</h1><hr><code class="expression">[g-s]</code><hr><code class="text">abcdef<em>g</em><em>h</em><em>i</em><em>j</em><em>k</em><em>l</em><em>m</em><em>n</em><em>o</em><em>p</em><em>q</em><em>r</em><em>s</em>tuvwxyz</code></div></div>
        </div>
        
        <div data-id="dot"><h3 class="label">dot .</h3>
            <div class="content">Matches any character except linebreaks. Equivalent to <code>[^\n\r]</code>.<div class="example"><h1>Example</h1><hr><code class="expression">.</code><hr><code class="text"><em>g</em><em>l</em><em>i</em><em>b</em><em> </em><em>j</em><em>o</em><em>c</em><em>k</em><em>s</em><em> </em><em>v</em><em>e</em><em>x</em><em> </em><em>d</em><em>w</em><em>a</em><em>r</em><em>v</em><em>e</em><em>s</em><em>!</em></code></div></div>
        </div>
        
        <div data-id="word"><h3 class="label">word \w</h3>
            <div class="content">Matches any word character (alphanumeric &amp; underscore). Only matches low-ascii characters (no accented or non-roman characters). Equivalent to <code>[A-Za-z0-9_]</code><div class="example"><h1>Example</h1><hr><code class="expression">\w</code><hr><code class="text"><em>b</em><em>o</em><em>n</em><em>j</em><em>o</em><em>u</em><em>r</em>, <em>m</em><em>o</em><em>n</em> <em>f</em><em>r</em>è<em>r</em><em>e</em></code></div></div>
        </div>
        
        <div data-id="notword"><h3 class="label">not word \W</h3>
            <div class="content">Matches any character that is not a word character (alphanumeric &amp; underscore). Equivalent to <code>[^A-Za-z0-9_]</code><div class="example"><h1>Example</h1><hr><code class="expression">\W</code><hr><code class="text">bonjour<em>,</em><em> </em>mon<em> </em>fr<em>è</em>re</code></div></div>
        </div>

        <div data-id="digit"><h3 class="label">digit \d</h3>
            <div class="content">Matches any digit character (0-9). Equivalent to <code>[0-9]</code>.<div class="example"><h1>Example</h1><hr><code class="expression">\d</code><hr><code class="text">+<em>1</em>-(<em>4</em><em>4</em><em>4</em>)-<em>5</em><em>5</em><em>5</em>-<em>1</em><em>2</em><em>3</em><em>4</em></code></div></div>
        </div>
        
        <div data-id="notdigit"><h3 class="label">not digit \D</h3>
            <div class="content">Matches any character that is not a digit character (0-9). Equivalent to <code>[^0-9]</code>.<div class="example"><h1>Example</h1><hr><code class="expression">\D</code><hr><code class="text"><em>+</em>1<em>-</em><em>(</em>444<em>)</em><em>-</em>555<em>-</em>1234</code></div></div>
        </div>
        
        <div data-id="whitespace"><h3 class="label">whitespace \s</h3>
            <div class="content">Matches any whitespace character (spaces, tabs, line breaks).<div class="example"><h1>Example</h1><hr><code class="expression">\s</code><hr><code class="text">glib<em> </em>jocks<em> </em>vex<em> </em>dwarves!</code></div></div>
        </div>
        
        <div data-id="notwhitespace"><h3 class="label">not whitespace \S</h3>
            <div class="content">Matches any character that is not a whitespace character (spaces, tabs, line breaks).<div class="example"><h1>Example</h1><hr><code class="expression">\S</code><hr><code class="text"><em>g</em><em>l</em><em>i</em><em>b</em> <em>j</em><em>o</em><em>c</em><em>k</em><em>s</em> <em>v</em><em>e</em><em>x</em> <em>d</em><em>w</em><em>a</em><em>r</em><em>v</em><em>e</em><em>s</em><em>!</em></code></div></div>
        </div>

        <h2 class="label1">Anchors</h2>
        <div data-id="bof"><h3 class="label">beginning ^</h3>
            <div class="content">Matches the beginning of the string, or the beginning of a line if the multiline flag (<code>m</code>) is enabled. This matches a position, not a character.<div class="example"><h1>Example</h1><hr><code class="expression">^\w+</code><hr><code class="text"><em>she</em> sells seashells</code></div></div>
        </div>
        
        <div data-id="eof"><h3 class="label">end $</h3>
            <div class="content">Matches the end of the string, or the end of a line if the multiline flag (<code>m</code>) is enabled. This matches a position, not a character.<div class="example"><h1>Example</h1><hr><code class="expression">\w+$</code><hr><code class="text">she sells <em>seashells</em></code></div></div>
        </div>
        
        <div data-id="wordboundary"><h3 class="label">word boundary \b</h3>
            <div class="content">Matches a word boundary position between a word character and non-word character or position (start / end of string). See the word character class (<code>w</code>) for more info.<div class="example"><h1>Example</h1><hr><code class="expression">s\b</code><hr><code class="text">she sell<em>s</em> seashell<em>s</em></code></div></div>
        </div>
        
        <div data-id="notwordboundary"><h3 class="label">not word boundary \B</h3>
            <div class="content">Matches any position that is not a word boundary. This matches a position, not a character.<div class="example"><h1>Example</h1><hr><code class="expression">s\B</code><hr><code class="text"><em>s</em>he <em>s</em>ells <em>s</em>ea<em>s</em>hells</code></div></div>
        </div>

        <h2 class="label1">Escaped characters</h2>
        <div data-id="reservedchar"><h3 class="label">reserved characters \+</h3>
            <div class="content">The following character have special meaning, and must be preceded by a <code>\</code> (backslash) to represent a literal character:<p><code>+*?^$\.[]{}()|/</code></p><p>Within a character set, only <code>\</code>, <code>-</code>, and <code>]</code> need to be escaped.</p><div class="example"><h1>Example</h1><hr><code class="expression">\+</code><hr><code class="text">1 <em>+</em> 1 = 2</code></div></div>
        </div>
        
        <div data-id="escoctal"><h3 class="label">octal escape \0000</h3>
            <div class="content">Octal escaped character in the form <code>\0000</code>. Value must be less than 255 (<code>\0377</code>).<div class="example"><h1>Example</h1><hr><code class="expression">\0251</code><hr><code class="text">Searchmonkey is <em>©</em>2018</code></div></div>
        </div>
        
        <div data-id="eschexadecimal"><h3 class="label">hexadecimal escape \xFF</h3>
            <div class="content">Hexadecimal escaped character in the form <code>\xFF</code>.<div class="example"><h1>Example</h1><hr><code class="expression">\xA9</code><hr><code class="text">Searchmonkey is <em>©</em>2018</code></div></div>
        </div>
        
        <div data-id="escunicodeu"><h3 class="label">unicode escape \uFFFF</h3>
            <div class="content">Unicode escaped character in the form <code>\uFFFF</code><div class="example"><h1>Example</h1><hr><code class="expression">\u00A9</code><hr><code class="text">Searchmonkey is <em>©</em>2018</code></div></div>
        </div>
        
        <div data-id="escunicodeub"><h3 class="label">extended unicode escape \u{FFFF}</h3>
            <div class="content">Unicode escaped character in the form <code>\u{FFFF}</code>. Supports a full range of unicode point escapes with any number of hex digits. <p>Requires the unicode flag (<code>u</code>).</p></div>
        </div>
        
        <div data-id="esccontrolchar"><h3 class="label">control character escape \cI</h3>
            <div class="content">Escaped control character in the form <code>\cZ</code>. This can range from <code>\cA</code> (SOH, char code 1) to <code>\cZ</code> (SUB, char code 26). <h1>Example:</h1><code>\cI</code> matches TAB (char code 9).</div>
        </div>
        
        <div data-id="esc_9"><h3 class="label">tab \t</h3>
            <div class="content">Matches a TAB character (char code 9).</div>
        </div>
        
        <div data-id="esc_10"><h3 class="label">line feed \n</h3>
            <div class="content">Matches a LINE FEED character (char code 10). Searchmonkey removes line endings before performing a search, and so this flag is not necessary.</div>
        </div>
        
        <div data-id="esc_11"><h3 class="label">vertical tab \v</h3>
            <div class="content">Matches a VERTICAL TAB character (char code 11).</div>
        </div>
        
        <div data-id="esc_12"><h3 class="label">form feed \f</h3>
            <div class="content">Matches a FORM FEED character (char code 12). Searchmonkey removes line endings before performing a search, and so this flag is not necessary.</div>
        </div>
        
        <div data-id="esc_13"><h3 class="label">carriage return \r</h3>
            <div class="content">Matches a CARRIAGE RETURN character (char code 13). Searchmonkey removes line endings before performing a search, and so this flag is not necessary.</div>
        </div>
        
        <div data-id="esc_0"><h3 class="label">null \0</h3>
            <div class="content">Matches a NULL character (char code 0).</div>
        </div>

        <h2 class="label1">Groups &amp; References</h2>
        <div data-id="group"><h3 class="label">capturing group (ABC)</h3>
            <div class="content">Groups multiple tokens together and creates a capture group for extracting a substring or using a backreference.<div class="example"><h1>Example</h1><hr><code class="expression">(ha)+</code><hr><code class="text"><em>hahaha</em> <em>ha</em>a <em>ha</em>h!</code></div></div>
        </div>
        <div data-id="numref"><h3 class="label">numeric reference \1</h3>
            <div class="content">Matches the results of a capture group. For example <code>\1</code> matches the results of the first capture group &amp; <code>\3</code> matches the third.<div class="example"><h1>Example</h1><hr><code class="expression">(\w)a\1</code><hr><code class="text"><em>hah</em> <em>dad</em> bad dab <em>gag</em> gab</code></div></div>
        </div>
        <div data-id="noncapgroup"><h3 class="label">non-capturing group (?:ABC)</h3>
            <div class="content">Groups multiple tokens together without creating a capture group.<div class="example"><h1>Example</h1><hr><code class="expression">(?:ha)+</code><hr><code class="text"><em>hahaha</em> <em>ha</em>a <em>ha</em>h!</code></div></div>
        </div>

        <h2 class="label1">Look-around</h2>
        <div data-id="poslookahead"><h3 class="label">positive lookahead (?=ABC)</h3>
            <div class="content">Matches a group after the main expression without including it in the result.<div class="example"><h1>Example</h1><hr><code class="expression">\d(?=px)</code><hr><code class="text">1pt <em>2</em>px 3em <em>4</em>px</code></div></div>
        </div>
        
        <div data-id="neglookahead"><h3 class="label">negative lookahead (?!ABC)</h3>
            <div class="content">Specifies a group that can not match after the main expression (if it matches, the result is discarded).<div class="example"><h1>Example</h1><hr><code class="expression">\d(?!px)</code><hr><code class="text"><em>1</em>pt 2px <em>3</em>em 4px</code></div></div>
        </div>

        <h2 class="label1">Quantifiers &amp; Alternation</h2>

        <div data-id="plus"><h3 class="label">plus +</h3>
            <div class="content">Matches 1 or more of the preceding token.<div class="example"><h1>Example</h1><hr><code class="expression">b\w+</code><hr><code class="text">b <em>be</em> <em>bee</em> <em>beer</em> <em>beers</em></code></div></div>
        </div>
        
        <div data-id="star"><h3 class="label">star *</h3>
            <div class="content">Matches 0 or more of the preceding token.<div class="example"><h1>Example</h1><hr><code class="expression">b\w*</code><hr><code class="text"><em>b</em> <em>be</em> <em>bee</em> <em>beer</em> <em>beers</em></code></div></div>            
        </div>
        
        <div data-id="quant"><h3 class="label">quantifier {1,3}</h3>
            <div class="content">Matches the specified quantity of the previous token. <code>{1,3}</code> will match 1 to 3. <code>{3}</code> will match exactly 3. <code>{3,}</code> will match 3 or more. <div class="example"><h1>Example</h1><hr><code class="expression">b\w{2,3}</code><hr><code class="text">b be <em>bee</em> <em>beer</em> <em>beer</em>s</code></div></div>
        </div>
        
        <div data-id="opt"><h3 class="label">optional ?</h3>
            <div class="content">Matches 0 or 1 of the preceding token, effectively making it optional.<div class="example"><h1>Example</h1><hr><code class="expression">colou?r</code><hr><code class="text"><em>color</em> <em>colour</em></code></div></div>            
        </div>
        
        <div data-id="lazy"><h3 class="label">lazy ?</h3>
            <div class="content">Makes the preceding quantifier lazy, causing it to match as few characters as possible. By default, quantifiers are greedy, and will match as many characters as possible.<div class="example"><h1>Example</h1><hr><code class="expression">b\w+?</code><hr><code class="text">b <em>be</em> <em>be</em>e <em>be</em>er <em>be</em>ers</code></div></div>
        </div>
        
        <div data-id="alt"><h3 class="label">alternation |</h3>
            <div class="content">Acts like a boolean OR. Matches the expression before or after the <code>|</code>.<p>It can operate within a group, or on a whole expression. The patterns will be tested in order.</p><div class="example"><h1>Example</h1><hr><code class="expression">b(a|e|i)d</code><hr><code class="text"><em>bad</em> bud bod <em>bed</em> <em>bid</em></code></div></div>
        </div>

        <h2 class="label1">Substitution</h2>
        
        <div data-id="subst_$&amp;match" class="selected"><h3 class="label">match $&amp;</h3>
            <div class="content">Inserts the matched text. Searchmonkey does not currently support string substitution, so this is for reference only.</div>
        </div>
        <div data-id="subst_group"><h3 class="label">capture group $1</h3>
            <div class="content">Inserts the results of the specified capture group. For example, <code>$3</code> would insert the third capture group. Searchmonkey does not currently support string substitution, so this is for reference only.</div>
        </div>
        <div data-id="subst_$before"><h3 class="label">before match $`</h3>
            <div class="content">Inserts the portion of the source string that precedes the match. Searchmonkey does not currently support string substitution, so this is for reference only.</div>
        </div>
        <div data-id="subst_$after"><h3 class="label">after match $'</h3>
            <div class="content">Inserts the portion of the source string that follows the match. Searchmonkey does not currently support string substitution, so this is for reference only.</div>
        </div>
        <div data-id="subst_$esc"><h3 class="label">escaped $ $$</h3>
            <div class="content">Inserts a dollar sign character ($). Searchmonkey does not currently support string substitution, so this is for reference only.</div>
        </div>
        <div data-id="subst_esc"><h3 class="label">escaped characters \n</h3>
            <div class="content">These escaped characters are typically supported by a regular expression replace string: <code>\n</code>, <code>\r</code>, <code>\t</code>, <code>\\</code>, and unicode escapes <code>\uFFFF</code>.  Searchmonkey does not currently support string substitution, so this is for reference only.</div>
        </div>


        <h2 class="label1">Flags</h2>
        <div data-id="caseinsensitive"><h3 class="label">ignore case i</h3>
            <div class="content">Makes the whole expression case-insensitive. For example, <code>/aBc/i</code> would match <code>AbC</code>. The flags can be found in the main options tab.</div>
        </div>
        <div data-id="global"><h3 class="label">global search g</h3>
            <div class="content">Retain the index of the last match, allowing subsequent searches to start from the end of the previous match.<p>Without the global flag, subsequent searches will return the same match.</p><hr>Searchmonkey will only search for a single match when the global flag is disabled to avoid infinite match errors. The flags can be found in the main options tab.</div>
        </div>
        <div data-id="multiline"><h3 class="label">multiline m</h3>
            <div class="content">When the multiline flag is enabled, beginning and end anchors (<code>^</code> and <code>$</code>) will match the start and end of a line, instead of the start and end of the whole string.<p>Note that patterns such as <code>/^[\s\S]+$/m</code> may return matches that span multiple lines because the anchors will match the start/end of <b>any</b> line.</p> The flags can be found in the main options tab.</div>
        </div>
        <div data-id="unicode"><h3 class="label">unicode u</h3>
            <div class="content">When the unicode flag is enabled, you can use extended unicode escapes in the form <code>\x{FFFFF}</code>.<p>It also makes other escapes stricter, causing unrecognised escapes (ex. <code>\j</code>) to throw an error.</p> The flags can be found in the main options tab.</div>
        </div>
        <div data-id="sticky"><h3 class="label">sticky y</h3>
            <div class="content">When this flag is enabled, the expression will only match from its lastIndex position and ignores the global (<code>g</code>) flag if set. In Searchmonkey, each search is discrete and so this flag is not supported.</div>
        </div>
    </body>
</html>